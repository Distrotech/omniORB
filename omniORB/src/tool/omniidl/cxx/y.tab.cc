
/*  A Bison parser, made from /home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENTIFIER	257
#define	ABSTRACT	258
#define	ANY	259
#define	ATTRIBUTE	260
#define	BOOLEAN	261
#define	CASE	262
#define	CHAR	263
#define	CONST	264
#define	CONTEXT	265
#define	CUSTOM	266
#define	DEFAULT	267
#define	DOUBLE	268
#define	ENUM	269
#define	EXCEPTION	270
#define	FACTORY	271
#define	FALSE_	272
#define	FIXED	273
#define	FLOAT	274
#define	IN	275
#define	INOUT	276
#define	INTERFACE	277
#define	LOCAL	278
#define	LONG	279
#define	MODULE	280
#define	NATIVE	281
#define	OBJECT	282
#define	OCTET	283
#define	ONEWAY	284
#define	OUT	285
#define	PRIVATE	286
#define	PUBLIC	287
#define	RAISES	288
#define	READONLY	289
#define	SEQUENCE	290
#define	SHORT	291
#define	STRING	292
#define	STRUCT	293
#define	SUPPORTS	294
#define	SWITCH	295
#define	TRUE_	296
#define	TRUNCATABLE	297
#define	TYPEDEF	298
#define	UNION	299
#define	UNSIGNED	300
#define	VALUEBASE	301
#define	VALUETYPE	302
#define	VOID	303
#define	WCHAR	304
#define	WSTRING	305
#define	PRAGMA	306
#define	PRAGMA_PREFIX	307
#define	PRAGMA_ID	308
#define	PRAGMA_VERSION	309
#define	OMNI_PRAGMA	310
#define	END_PRAGMA	311
#define	UNKNOWN_PRAGMA_BODY	312
#define	INTEGER_LITERAL	313
#define	CHARACTER_LITERAL	314
#define	WIDE_CHARACTER_LITERAL	315
#define	FLOATING_PT_LITERAL	316
#define	STRING_LITERAL	317
#define	WIDE_STRING_LITERAL	318
#define	FIXED_PT_LITERAL	319
#define	SCOPE_DELIM	320
#define	LEFT_SHIFT	321
#define	RIGHT_SHIFT	322

#line 94 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"


#include <stdlib.h>
#include <string.h>

#include <idlutil.h>
#include <idlerr.h>
#include <idlrepoId.h>
#include <idlscope.h>
#include <idltype.h>
#include <idlexpr.h>
#include <idlast.h>

#define YYDEBUG 1

// Globals from lexer
extern int         yylineno;
extern char*       currentFile;
extern IDL_Boolean mainFile;

void yyerror(char *s) {
}
extern int yylex();

// Nasty hack for abstract valuetypes
ValueAbs* valueabs_hack = 0;

#ifdef __VMS
/*  Apparently, __ALLOCA is defined for some versions of the C (but not C++)
    compiler on VAX. */
#if defined(__ALPHA) || defined(__DECC) && __DECC_VER >= 60000000
#include <builtins.h>
#define alloca __ALLOCA
#else
#define alloca malloc
#endif
#endif


#line 134 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
typedef union {
  char*                    id_val;
  int                      int_val;
  IDL_ULong                ulong_val;
  IdlIntLiteral            int_literal_val;
#ifndef __VMS
  IdlFloatLiteral          float_literal_val;
#else
  double                   float_literal_val;
#endif
  char                     char_val;
  char*                    string_val;
  IDL_WChar                wchar_val;
  IDL_WChar*               wstring_val;
  IDL_Boolean              boolean_val;
  IDL_Fixed*               fixed_val;
  IdlType*                 type_val;
  TypeSpec*                type_spec_val;
  IdlExpr*                 expr_val;
  ScopedName*              scopedname_val;
  Decl*                    decl_val;
  Module*                  module_val;
  Interface*               interface_val;
  InheritSpec*             inheritspec_val;
  Forward*                 forward_val;
  Const*                   const_val;
  Typedef*                 typedef_val;
  Struct*                  struct_val;
  Exception*               exception_val;
  Member*                  member_val;
  Declarator*              declarator_val;
  Union*                   union_val;
  UnionCase*               union_case_val;
  CaseLabel*               case_label_val;
  ValueBase*               value_base_val;
  Value*                   value_val;
  ValueForward*            value_forward_val;
  ValueBox*                value_box_val;
  ValueAbs*                value_abs_val;
  ValueInheritSpec*        valueinheritspec_val;
  ValueInheritSupportSpec* valueinheritsupportspec_val;
  StateMember*             statemember_val;
  Factory*                 factory_val;
  Enumerator*              enumerator_val;
  Enum*                    enum_val;
  ArraySize*               array_size_val;
  Attribute*               attribute_val;
  Operation*               operation_val;
  Parameter*               parameter_val;
  RaisesSpec*              raisesspec_val;
  ContextSpec*             contextspec_val;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		507
#define	YYFLAG		-32768
#define	YYNTBASE	91

#define YYTRANSLATE(x) ((unsigned)(x) <= 322 ? yytranslate[x] : 238)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    84,    79,     2,    74,
    75,    82,    80,    73,    81,    90,    83,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    72,    69,    86,
    76,    87,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    88,     2,    89,    78,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    70,    77,    71,    85,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    14,    17,    20,    23,
    26,    28,    30,    32,    38,    39,    46,    49,    52,    54,
    56,    61,    62,    69,    72,    76,    82,    83,    85,    87,
    89,    90,    93,    96,    99,   102,   105,   108,   110,   112,
   113,   115,   118,   121,   127,   129,   131,   133,   136,   140,
   142,   144,   146,   148,   151,   155,   159,   160,   168,   169,
   178,   180,   185,   189,   194,   197,   201,   206,   209,   212,
   215,   216,   218,   220,   224,   226,   227,   230,   232,   234,
   236,   241,   243,   245,   246,   253,   254,   261,   264,   265,
   267,   269,   273,   277,   283,   285,   287,   289,   291,   293,
   295,   297,   299,   301,   303,   305,   307,   311,   313,   317,
   319,   323,   325,   329,   333,   335,   339,   343,   345,   349,
   353,   357,   360,   362,   364,   366,   368,   370,   372,   376,
   378,   380,   382,   384,   386,   388,   390,   392,   394,   397,
   399,   402,   404,   406,   408,   411,   413,   415,   417,   420,
   422,   425,   427,   429,   431,   433,   435,   437,   439,   441,
   443,   445,   447,   449,   451,   453,   455,   457,   459,   461,
   463,   465,   467,   470,   476,   478,   480,   482,   484,   486,
   488,   491,   493,   495,   497,   499,   501,   503,   505,   508,
   510,   512,   514,   517,   520,   524,   526,   528,   530,   532,
   534,   536,   543,   546,   549,   552,   556,   560,   562,   576,
   579,   582,   584,   586,   588,   590,   592,   594,   597,   601,
   605,   607,   610,   615,   619,   622,   629,   632,   635,   638,
   644,   646,   653,   658,   663,   665,   670,   672,   675,   677,
   680,   684,   689,   690,   692,   695,   701,   708,   711,   714,
   715,   718,   719,   727,   730,   734,   735,   737,   739,   741,
   743,   748,   752,   756,   759,   765,   769,   771,   773,   775,
   776,   779,   784,   787,   793,   794,   797,   802,   805,   811,
   813,   815,   817,   819,   826,   828,   830,   833,   836,   838,
   840,   842,   844,   846,   849,   850,   852,   856,   859,   864,
   868,   875,   879,   883,   887,   889
};

static const short yyrhs[] = {    -1,
    92,     0,    93,     0,    92,    93,     0,   152,    69,     0,
   135,    69,     0,   205,    69,     0,    97,    69,     0,    94,
    69,     0,   111,    69,     0,   229,     0,   232,     0,     1,
     0,    96,   231,    70,    92,    71,     0,     0,    96,     1,
    95,    70,    92,    71,     0,    96,     1,     0,    26,     3,
     0,    98,     0,   100,     0,   101,    70,   103,    71,     0,
     0,   101,     1,    99,    70,   103,    71,     0,   101,     1,
     0,   102,    23,     3,     0,   102,    23,     3,   231,   106,
     0,     0,     4,     0,    24,     0,   104,     0,     0,   104,
   105,     0,   152,    69,     0,   135,    69,     0,   205,    69,
     0,   202,    69,     0,   208,    69,     0,   229,     0,     1,
     0,     0,   107,     0,    72,   108,     0,   109,   231,     0,
   108,    73,   231,   109,   231,     0,     1,     0,   110,     0,
     3,     0,    66,     3,     0,   110,    66,     3,     0,   117,
     0,   114,     0,   113,     0,   112,     0,    48,     3,     0,
     4,    48,     3,     0,    48,     3,   154,     0,     0,     4,
    48,     3,   115,    70,   104,    71,     0,     0,     4,    48,
     3,   119,   116,    70,   104,    71,     0,     1,     0,   118,
    70,   124,    71,     0,    48,     3,   119,     0,    12,    48,
     3,   119,     0,    48,     3,     0,    12,    48,     3,     0,
    72,   120,    40,   108,     0,    72,   120,     0,    40,   108,
     0,   121,   122,     0,     0,    43,     0,   123,     0,   122,
    73,   123,     0,   110,     0,     0,   124,   125,     0,   105,
     0,   126,     0,   128,     0,   127,   154,   159,    69,     0,
    33,     0,    32,     0,     0,   131,    74,   132,    75,   129,
    69,     0,     0,   131,    74,     1,    75,   130,    69,     0,
    17,     3,     0,     0,   133,     0,   134,     0,   133,    73,
   134,     0,    21,   224,     3,     0,    10,   136,     3,    76,
   137,     0,   164,     0,   173,     0,   174,     0,   175,     0,
   163,     0,   197,     0,   198,     0,   226,     0,   110,     0,
   176,     0,   138,     0,   139,     0,   138,    77,   139,     0,
   140,     0,   139,    78,   140,     0,   141,     0,   140,    79,
   141,     0,   142,     0,   141,    68,   142,     0,   141,    67,
   142,     0,   143,     0,   142,    80,   143,     0,   142,    81,
   143,     0,   144,     0,   143,    82,   144,     0,   143,    83,
   144,     0,   143,    84,   144,     0,   145,   146,     0,   146,
     0,    81,     0,    80,     0,    85,     0,   110,     0,   147,
     0,    74,   137,    75,     0,    59,     0,   148,     0,   149,
     0,    60,     0,    61,     0,    65,     0,    62,     0,   150,
     0,    63,     0,   148,    63,     0,    64,     0,   149,    64,
     0,    42,     0,    18,     0,   137,     0,    44,   153,     0,
   179,     0,   183,     0,   192,     0,    27,     3,     0,   228,
     0,   154,   159,     0,   155,     0,   158,     0,   156,     0,
   157,     0,   110,     0,   163,     0,   164,     0,   173,     0,
   174,     0,   175,     0,   176,     0,   177,     0,   178,     0,
   227,     0,   196,     0,   197,     0,   198,     0,   225,     0,
   179,     0,   183,     0,   192,     0,   160,   231,     0,   159,
    73,   231,   160,   231,     0,   161,     0,   162,     0,     3,
     0,   199,     0,    20,     0,    14,     0,    25,    14,     0,
   165,     0,   169,     0,   166,     0,   167,     0,   168,     0,
    37,     0,    25,     0,    25,    25,     0,   170,     0,   171,
     0,   172,     0,    46,    37,     0,    46,    25,     0,    46,
    25,    25,     0,     9,     0,    50,     0,     7,     0,    29,
     0,     5,     0,    28,     0,   180,   231,    70,   231,   181,
    71,     0,   180,     1,     0,    39,     3,     0,   182,   231,
     0,   181,   182,   231,     0,   154,   159,    69,     0,     1,
     0,   184,   231,    41,    74,   231,   185,   231,    75,   231,
    70,   231,   186,    71,     0,   184,     1,     0,    45,     3,
     0,   164,     0,   173,     0,   175,     0,   192,     0,   110,
     0,   187,     0,   188,   231,     0,   187,   188,   231,     0,
   189,   191,    69,     0,   190,     0,   189,   190,     0,     8,
   137,    72,   231,     0,    13,    72,   231,     0,   154,   160,
     0,   193,   231,    70,   231,   194,    71,     0,   193,     1,
     0,    15,     3,     0,   195,   231,     0,   194,    73,   231,
   195,   231,     0,     3,     0,    36,    86,   155,    73,   151,
    87,     0,    36,    86,   155,    87,     0,    38,    86,   151,
    87,     0,    38,     0,    51,    86,   151,    87,     0,    51,
     0,     3,   200,     0,   201,     0,   200,   201,     0,    88,
   151,    89,     0,   203,     6,   224,   204,     0,     0,    35,
     0,   161,   231,     0,   204,    73,   231,   161,   231,     0,
   206,   231,    70,   231,   207,    71,     0,   206,     1,     0,
    16,     3,     0,     0,   207,   182,     0,     0,   210,   231,
   214,   209,   231,   218,   221,     0,   210,     1,     0,   211,
   213,     3,     0,     0,   212,     0,    30,     0,   224,     0,
    49,     0,    74,   231,   215,    75,     0,    74,   231,    75,
     0,    74,     1,    75,     0,   216,   231,     0,   215,    73,
   231,   216,   231,     0,   217,   224,     3,     0,    21,     0,
    31,     0,    22,     0,     0,   219,   231,     0,    34,    74,
   220,    75,     0,   110,   231,     0,   220,    73,   231,   110,
   231,     0,     0,   222,   231,     0,    11,    74,   223,    75,
     0,   148,   231,     0,   223,    73,   231,   148,   231,     0,
   156,     0,   197,     0,   198,     0,   110,     0,    19,    86,
   151,    73,   137,    87,     0,    19,     0,    47,     0,    39,
     3,     0,    45,     3,     0,   233,     0,   234,     0,   235,
     0,   236,     0,   229,     0,   230,   229,     0,     0,   230,
     0,    53,   148,    57,     0,    53,     1,     0,    54,   110,
   148,    57,     0,    54,     1,    57,     0,    55,   110,    59,
    90,    59,    57,     0,    55,     1,    57,     0,    52,   237,
    57,     0,    56,   237,    57,     0,    58,     0,   237,    58,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   400,   402,   408,   410,   416,   418,   419,   420,   421,   422,
   423,   424,   425,   431,   436,   439,   443,   451,   455,   457,
   460,   465,   468,   472,   480,   486,   494,   496,   497,   500,
   504,   506,   512,   514,   515,   516,   517,   518,   519,   525,
   527,   530,   534,   542,   550,   557,   561,   565,   568,   578,
   580,   581,   582,   585,   589,   594,   602,   605,   610,   614,
   619,   631,   638,   644,   649,   652,   657,   661,   664,   669,
   676,   678,   681,   689,   699,   703,   705,   711,   713,   714,
   717,   725,   727,   730,   733,   737,   739,   747,   753,   755,
   758,   760,   766,   774,   780,   782,   783,   784,   785,   786,
   787,   788,   789,   792,   795,   799,   801,   804,   806,   809,
   811,   816,   818,   821,   826,   828,   829,   832,   834,   837,
   840,   845,   851,   854,   856,   857,   860,   864,   865,   868,
   872,   875,   878,   881,   884,   887,   890,   895,   897,   906,
   908,   917,   919,   922,   931,   933,   934,   935,   936,   939,
   942,   950,   952,   955,   957,   958,   963,   965,   966,   967,
   968,   969,   970,   971,   972,   975,   977,   978,   979,   982,
   984,   985,   988,   990,   996,   998,  1001,  1007,  1011,  1013,
  1014,  1017,  1019,  1022,  1024,  1025,  1028,  1032,  1036,  1040,
  1042,  1043,  1046,  1050,  1054,  1058,  1062,  1066,  1070,  1074,
  1078,  1082,  1087,  1095,  1101,  1103,  1109,  1115,  1122,  1131,
  1139,  1145,  1147,  1148,  1149,  1150,  1156,  1160,  1162,  1168,
  1175,  1177,  1183,  1187,  1192,  1199,  1204,  1211,  1217,  1219,
  1225,  1231,  1235,  1240,  1242,  1247,  1249,  1254,  1260,  1262,
  1268,  1272,  1278,  1280,  1283,  1285,  1291,  1296,  1304,  1310,
  1312,  1318,  1321,  1325,  1334,  1340,  1342,  1345,  1349,  1351,
  1354,  1356,  1357,  1364,  1366,  1372,  1378,  1380,  1381,  1384,
  1386,  1389,  1393,  1397,  1403,  1405,  1408,  1412,  1416,  1422,
  1424,  1425,  1426,  1431,  1454,  1460,  1464,  1468,  1473,  1475,
  1476,  1477,  1480,  1482,  1485,  1487,  1490,  1494,  1499,  1504,
  1509,  1514,  1519,  1525,  1531,  1533
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
"ABSTRACT","ANY","ATTRIBUTE","BOOLEAN","CASE","CHAR","CONST","CONTEXT","CUSTOM",
"DEFAULT","DOUBLE","ENUM","EXCEPTION","FACTORY","FALSE_","FIXED","FLOAT","IN",
"INOUT","INTERFACE","LOCAL","LONG","MODULE","NATIVE","OBJECT","OCTET","ONEWAY",
"OUT","PRIVATE","PUBLIC","RAISES","READONLY","SEQUENCE","SHORT","STRING","STRUCT",
"SUPPORTS","SWITCH","TRUE_","TRUNCATABLE","TYPEDEF","UNION","UNSIGNED","VALUEBASE",
"VALUETYPE","VOID","WCHAR","WSTRING","PRAGMA","PRAGMA_PREFIX","PRAGMA_ID","PRAGMA_VERSION",
"OMNI_PRAGMA","END_PRAGMA","UNKNOWN_PRAGMA_BODY","INTEGER_LITERAL","CHARACTER_LITERAL",
"WIDE_CHARACTER_LITERAL","FLOATING_PT_LITERAL","STRING_LITERAL","WIDE_STRING_LITERAL",
"FIXED_PT_LITERAL","SCOPE_DELIM","LEFT_SHIFT","RIGHT_SHIFT","';'","'{'","'}'",
"':'","','","'('","')'","'='","'|'","'^'","'&'","'+'","'-'","'*'","'/'","'%'",
"'~'","'<'","'>'","'['","']'","'.'","start","definition_plus","definition","module",
"@1","module_header","interface","interface_dcl","@2","forward_dcl","interface_header",
"abstract_local_opt","interface_body","export_star","export","interface_inheritance_spec_opt",
"interface_inheritance_spec","interface_inheritance_list","interface_name","scoped_name",
"value","value_forward_dcl","value_box_dcl","value_abs_dcl","@3","@4","value_dcl",
"value_header","value_inheritance_spec","value_value_inheritance_spec","truncatable_opt",
"value_inheritance_list","value_name","value_element_star","value_element","state_member",
"member_access","init_dcl","@5","@6","init_dcl_header","init_param_decls_opt",
"init_param_decls","init_param_decl","const_dcl","const_type","const_exp","or_expr",
"xor_expr","and_expr","shift_expr","add_expr","mult_expr","unary_expr","unary_operator",
"primary_expr","literal","string_literal_plus","wide_string_literal_plus","boolean_literal",
"positive_int_const","type_dcl","type_declarator","type_spec","simple_type_spec",
"base_type_spec","template_type_spec","constr_type_spec","declarators","declarator",
"simple_declarator","complex_declarator","floating_pt_type","integer_type","signed_int",
"signed_short_int","signed_long_int","signed_long_long_int","unsigned_int","unsigned_short_int",
"unsigned_long_int","unsigned_long_long_int","char_type","wide_char_type","boolean_type",
"octet_type","any_type","object_type","struct_type","struct_header","member_list",
"member","union_type","union_header","switch_type_spec","switch_body","case_plus",
"case","case_label_plus","case_label","element_spec","enum_type","enum_header",
"enumerator_list","enumerator","sequence_type","string_type","wide_string_type",
"array_declarator","fixed_array_size_plus","fixed_array_size","attr_dcl","readonly_opt",
"simple_declarator_list","except_dcl","except_header","member_star","op_dcl",
"@7","op_header","op_attribute_opt","op_attribute","op_type_spec","parameter_dcls",
"param_dcl_list","param_dcl","param_attribute","raises_expr_opt","raises_expr",
"scoped_name_list","context_expr_opt","context_expr","string_literal_list","param_type_spec",
"fixed_pt_type","fixed_pt_const_type","value_base_type","constr_forward_decl",
"pragma","pragmas","pragmas_opt","pragma_prefix","pragma_id","pragma_version",
"unknown_pragma","omni_pragma","unknown_pragma_body_plus", NULL
};
#endif

static const short yyr1[] = {     0,
    91,    91,    92,    92,    93,    93,    93,    93,    93,    93,
    93,    93,    93,    94,    95,    94,    94,    96,    97,    97,
    98,    99,    98,    98,   100,   101,   102,   102,   102,   103,
   104,   104,   105,   105,   105,   105,   105,   105,   105,   106,
   106,   107,   108,   108,   108,   109,   110,   110,   110,   111,
   111,   111,   111,   112,   112,   113,   115,   114,   116,   114,
   114,   117,   118,   118,   118,   118,   119,   119,   119,   120,
   121,   121,   122,   122,   123,   124,   124,   125,   125,   125,
   126,   127,   127,   129,   128,   130,   128,   131,   132,   132,
   133,   133,   134,   135,   136,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   137,   138,   138,   139,   139,   140,
   140,   141,   141,   141,   142,   142,   142,   143,   143,   143,
   143,   144,   144,   145,   145,   145,   146,   146,   146,   147,
   147,   147,   147,   147,   147,   147,   147,   148,   148,   149,
   149,   150,   150,   151,   152,   152,   152,   152,   152,   152,
   153,   154,   154,   155,   155,   155,   156,   156,   156,   156,
   156,   156,   156,   156,   156,   157,   157,   157,   157,   158,
   158,   158,   159,   159,   160,   160,   161,   162,   163,   163,
   163,   164,   164,   165,   165,   165,   166,   167,   168,   169,
   169,   169,   170,   171,   172,   173,   174,   175,   176,   177,
   178,   179,   179,   180,   181,   181,   182,   182,   183,   183,
   184,   185,   185,   185,   185,   185,   186,   187,   187,   188,
   189,   189,   190,   190,   191,   192,   192,   193,   194,   194,
   195,   196,   196,   197,   197,   198,   198,   199,   200,   200,
   201,   202,   203,   203,   204,   204,   205,   205,   206,   207,
   207,   209,   208,   208,   210,   211,   211,   212,   213,   213,
   214,   214,   214,   215,   215,   216,   217,   217,   217,   218,
   218,   219,   220,   220,   221,   221,   222,   223,   223,   224,
   224,   224,   224,   225,   226,   227,   228,   228,   229,   229,
   229,   229,   230,   230,   231,   231,   232,   232,   233,   233,
   234,   234,   235,   236,   237,   237
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     1,     5,     0,     6,     2,     2,     1,     1,
     4,     0,     6,     2,     3,     5,     0,     1,     1,     1,
     0,     2,     2,     2,     2,     2,     2,     1,     1,     0,
     1,     2,     2,     5,     1,     1,     1,     2,     3,     1,
     1,     1,     1,     2,     3,     3,     0,     7,     0,     8,
     1,     4,     3,     4,     2,     3,     4,     2,     2,     2,
     0,     1,     1,     3,     1,     0,     2,     1,     1,     1,
     4,     1,     1,     0,     6,     0,     6,     2,     0,     1,
     1,     3,     3,     5,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     3,     1,     3,     1,
     3,     1,     3,     3,     1,     3,     3,     1,     3,     3,
     3,     2,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
     2,     1,     1,     1,     2,     1,     1,     1,     2,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     5,     1,     1,     1,     1,     1,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     2,     1,
     1,     1,     2,     2,     3,     1,     1,     1,     1,     1,
     1,     6,     2,     2,     2,     3,     3,     1,    13,     2,
     2,     1,     1,     1,     1,     1,     1,     2,     3,     3,
     1,     2,     4,     3,     2,     6,     2,     2,     2,     5,
     1,     6,     4,     4,     1,     4,     1,     2,     1,     2,
     3,     4,     0,     1,     2,     5,     6,     2,     2,     0,
     2,     0,     7,     2,     3,     0,     1,     1,     1,     1,
     4,     3,     3,     2,     5,     3,     1,     1,     1,     0,
     2,     4,     2,     5,     0,     2,     4,     2,     5,     1,
     1,     1,     1,     6,     1,     1,     2,     2,     1,     1,
     1,     1,     1,     2,     0,     1,     3,     2,     4,     3,
     6,     3,     3,     3,     1,     2
};

static const short yydefact[] = {     0,
    13,    28,     0,     0,     0,     0,    29,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     3,
     0,     0,     0,    19,    20,     0,     0,     0,    53,    52,
    51,    50,     0,     0,     0,   146,     0,   147,     0,   148,
     0,     0,     0,   150,    11,    12,   289,   290,   291,   292,
     0,    47,   198,   196,   180,   285,   179,   188,   199,   187,
   235,     0,   197,   237,     0,   103,     0,    99,    95,   182,
   184,   185,   186,   183,   190,   191,   192,    96,    97,    98,
   104,   100,   101,   102,     0,   228,   249,    18,   149,   204,
   200,     0,   201,     0,     0,     0,   286,   156,   145,     0,
   152,   154,   155,   153,   157,   158,   159,   160,   161,   162,
   163,   164,   170,   171,   172,   166,   167,   168,   169,   165,
   211,    54,   305,     0,   298,   138,     0,     0,     0,     0,
     0,     0,     4,     9,    15,   293,   296,     0,     8,    22,
    31,     0,    10,    76,     6,     5,   203,     0,   210,     0,
   227,     0,     7,   248,     0,    55,   181,   189,     0,   194,
   193,     0,    48,     0,     0,    66,     0,     0,   204,   211,
   177,   151,   295,   175,   176,   178,     0,    71,    63,    56,
   303,   306,   297,   139,   300,     0,   302,     0,   304,     0,
   294,     0,     0,     0,     0,   295,     0,   295,     0,   295,
   295,     0,    59,   143,   142,   130,   133,   134,   136,   140,
   135,     0,   125,   124,   126,   127,   144,   105,   106,   108,
   110,   112,   115,   118,     0,   123,   128,   131,   132,   137,
     0,   195,     0,    49,     0,    64,     0,     0,     0,   238,
   239,   295,   173,    45,    69,   295,    46,    72,    68,     0,
   299,     0,     0,     0,    31,    21,    39,   258,   244,    32,
     0,     0,     0,     0,     0,     0,     0,     0,   257,    38,
    40,     0,    83,    82,    62,    78,    77,    79,     0,    80,
     0,     0,   295,     0,   250,    31,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   141,
   234,   236,    94,     0,     0,   233,     0,   240,     0,   295,
    43,     0,    75,    70,    73,     0,     0,    14,     0,    34,
    33,    36,     0,    35,    37,   254,     0,   260,   283,   280,
   281,   282,     0,   259,     0,    26,    41,    88,     0,     0,
   208,     0,     0,   295,     0,   231,     0,   295,     0,     0,
    31,   129,   107,   109,   111,   114,   113,   116,   117,   119,
   120,   121,     0,     0,   241,   295,     0,    67,     0,   301,
    16,    23,     0,     0,   252,   255,    42,     0,     0,     0,
     0,    90,    91,     0,   202,   295,   205,   188,   216,   212,
   213,   214,   295,   215,   226,   295,   229,   247,   251,    58,
     0,   284,   232,   174,   295,    74,   177,   295,   242,     0,
     0,   295,    81,    86,     0,    84,     0,   207,   206,     0,
     0,    60,    44,   245,   295,   263,   267,   269,   268,   262,
     0,   295,     0,   270,     0,    93,     0,    92,   295,   295,
     0,   295,   261,   264,     0,     0,   275,   295,    87,    85,
     0,   230,   295,     0,   266,     0,     0,   253,   295,   271,
   295,   246,   295,   295,     0,     0,   276,     0,   265,   273,
   295,   272,   295,     0,     0,     0,     0,   217,   295,     0,
   221,     0,   278,   295,   277,     0,   295,   209,   295,   218,
     0,   222,     0,   295,     0,   295,   224,   219,   225,   220,
   274,   295,   223,   279,     0,     0,     0
};

static const short yydefgoto[] = {   505,
    19,    20,    21,   190,    22,    23,    24,   193,    25,    26,
    27,   194,   195,   260,   336,   337,   245,   246,   216,    28,
    29,    30,    31,   202,   287,    32,    33,   179,   249,   250,
   314,   315,   197,   277,   278,   279,   280,   437,   435,   281,
   381,   382,   383,    34,    67,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
    35,    99,   342,   101,   102,   103,   104,   172,   173,   174,
   175,   105,   106,    70,    71,    72,    73,    74,    75,    76,
    77,   107,   108,   109,   110,   111,   112,    36,    37,   343,
   344,    38,    39,   393,   477,   478,   479,   480,   481,   493,
    40,    41,   347,   348,   116,   117,   118,   176,   240,   241,
   263,   264,   409,    42,    43,   349,   266,   412,   267,   268,
   269,   333,   375,   431,   432,   433,   447,   448,   465,   458,
   459,   474,   334,   119,    84,   120,    44,   136,   137,   138,
    46,    47,    48,    49,    50,   124
};

static const short yypact[] = {  1318,
   -17,    14,  1286,    82,   148,   204,-32768,   208,   215,   217,
  1094,   225,   251,   134,    62,    36,    44,   134,  1375,-32768,
   187,    53,   194,-32768,-32768,    31,   241,   196,-32768,-32768,
-32768,-32768,   200,   197,   202,-32768,   128,-32768,   184,-32768,
   154,   206,   167,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   276,-32768,-32768,-32768,-32768,-32768,-32768,    39,-32768,-32768,
   198,    18,-32768,   199,   283,   221,   285,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   286,-32768,-32768,-32768,-32768,   222,
-32768,   207,-32768,   209,   287,   289,-32768,   221,-32768,   291,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   227,   942,-32768,    32,-32768,-32768,    25,   240,    65,   243,
    27,    99,-32768,-32768,   229,-32768,   189,   231,-32768,   233,
-32768,   301,-32768,-32768,-32768,-32768,-32768,   235,-32768,   265,
-32768,   237,-32768,-32768,   238,    -4,-32768,-32768,    73,   288,
-32768,    73,-32768,   307,   236,    -7,    73,  1143,-32768,-32768,
   226,   242,   189,-32768,-32768,-32768,    56,   273,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    86,-32768,   228,-32768,   247,
-32768,  1431,   249,   250,   609,   135,   551,   189,   246,   189,
   189,   256,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    73,-32768,-32768,-32768,   221,-32768,   252,   253,   248,
     5,   121,    87,-32768,   100,-32768,-32768,   267,   264,-32768,
   245,-32768,   258,-32768,    73,-32768,   263,   -38,    73,   226,
-32768,   189,-32768,-32768,   277,   189,   221,-32768,   311,    58,
-32768,   293,  1431,   359,-32768,-32768,-32768,-32768,-32768,-32768,
   284,   290,   292,   349,   295,   296,    23,  1192,-32768,-32768,
   298,   353,-32768,-32768,-32768,-32768,-32768,-32768,  1094,-32768,
   299,   996,   189,   354,-32768,-32768,   302,   303,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,-32768,-32768,
-32768,-32768,-32768,    73,    73,-32768,   300,-32768,   291,   189,
-32768,    56,   221,   304,-32768,   305,   888,-32768,   310,-32768,
-32768,-32768,  1241,-32768,-32768,-32768,   313,-32768,   221,-32768,
-32768,-32768,   373,-32768,    56,-32768,-32768,-32768,   291,    20,
-32768,   291,   783,   189,   381,-32768,   -33,   189,   836,   667,
-32768,-32768,   253,   248,     5,   121,   121,    87,    87,-32768,
-32768,-32768,   306,   312,-32768,   189,    58,   277,    58,-32768,
-32768,-32768,   388,    29,-32768,-32768,   277,    75,   317,  1241,
   319,   324,-32768,   104,-32768,   189,-32768,   375,   221,-32768,
-32768,-32768,   189,-32768,-32768,   189,-32768,-32768,-32768,-32768,
   725,-32768,-32768,-32768,   189,-32768,-32768,   189,   329,   333,
   119,   189,-32768,-32768,   407,-32768,   395,-32768,-32768,   342,
   354,-32768,-32768,-32768,   189,-32768,-32768,-32768,-32768,-32768,
   113,   189,  1241,   385,   351,-32768,   352,-32768,   189,   189,
   388,   189,-32768,-32768,   419,   350,   414,   189,-32768,-32768,
   356,-32768,   189,    49,-32768,    58,   355,-32768,   189,-32768,
   189,-32768,   189,   161,   124,   365,-32768,    79,-32768,-32768,
   189,-32768,   179,   139,    73,   362,   364,    79,   189,  1045,
-32768,    58,-32768,   189,-32768,   366,   189,-32768,   189,-32768,
   291,-32768,   367,   161,   365,   189,-32768,-32768,-32768,-32768,
-32768,   179,-32768,-32768,   437,   439,-32768
};

static const short yypgoto[] = {-32768,
  -134,    -8,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   185,  -238,   244,-32768,-32768,  -268,    77,    -1,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -110,-32768,-32768,
-32768,    76,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    35,  -175,-32768,  -193,-32768,   153,   156,   158,
   -45,   -35,   -46,-32768,   232,-32768,   -15,-32768,-32768,  -133,
  -172,-32768,    -5,   308,  -254,-32768,-32768,  -146,  -296,  -342,
-32768,   451,     1,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,     4,   453,     9,   455,-32768,-32768,    -6,-32768,-32768,
  -197,    -2,-32768,-32768,-32768,-32768,   -19,-32768,   -20,-32768,
   -10,-32768,-32768,    40,-32768,     0,    15,-32768,-32768,   223,
-32768,-32768,-32768,  -169,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    10,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -306,-32768,-32768,-32768,-32768,     8,-32768,    57,
-32768,-32768,-32768,-32768,-32768,   448
};


#define	YYLAST		1487


static const short yytable[] = {   127,
   115,    66,    82,    69,   113,   100,    78,    45,   114,    98,
   133,    80,   366,   330,   129,   131,   373,    83,   288,   261,
   379,   261,   262,   326,   262,   265,    45,   265,   233,   410,
   408,   140,   177,   237,   305,   177,   128,   395,    52,   396,
   380,   303,   160,   368,   130,   203,    52,   350,   306,  -295,
  -295,   -61,   157,   135,   161,   236,   244,   254,    52,  -295,
    52,    51,   125,   158,   178,   -57,   377,   178,   330,   427,
   428,   292,   293,   415,    14,    52,    16,    17,    18,   429,
    14,   183,    16,    17,    18,   188,   475,   184,   181,   182,
   204,   476,   164,   148,   -89,   150,  -295,   152,   453,   155,
   141,    65,    52,  -295,    14,   307,    16,    17,    18,    65,
   363,   115,   401,   186,   205,   113,   180,   204,   317,   114,
    98,    65,  -295,    65,   126,   330,   445,   126,   147,    85,
   164,   206,   207,   208,   209,   126,   210,   211,    65,   427,
   428,   205,   251,   413,   191,   386,   212,   242,   184,   429,
    86,   399,   213,   214,   151,   189,   182,   215,   206,   207,
   208,   209,   126,   210,   211,    65,    98,   154,   296,   297,
   298,   364,   418,   212,   261,   247,   242,   262,   330,    14,
   265,    16,    17,    18,   149,   442,    14,   443,    16,    17,
    18,   123,   378,   430,   499,   384,   471,  -295,   472,    45,
   294,   295,   270,   -25,   270,    14,    87,    16,    17,    18,
    88,   484,    14,   485,    16,    17,    18,    89,    14,    90,
    16,    17,    18,  -295,  -295,   261,   164,   121,   262,   243,
    14,   265,    16,    17,    18,    14,  -295,    16,    17,    18,
    14,   184,    16,    17,    18,   133,   356,   357,   313,   360,
   361,   362,   271,   122,   282,   134,   284,   285,   358,   359,
    45,    45,   139,   142,   143,   145,   329,   331,   115,   144,
   146,   115,   113,   339,   153,   113,   114,    98,   156,   114,
    98,   486,   332,   159,   162,   163,   164,   165,   166,   169,
  -287,   170,   167,   171,   168,  -288,   185,   -17,   309,   187,
   192,   -24,   311,   196,   198,   199,   200,   201,   133,   234,
   247,   235,   232,   239,   242,   248,   253,   252,   255,   283,
   256,   329,   331,   327,    45,   286,   291,   300,   289,   184,
   290,   301,   115,   247,   394,   304,   113,   332,   115,   345,
   114,    98,   113,   389,   302,   390,   114,    98,   391,   310,
   312,   316,   320,   392,   323,   338,   346,   270,   321,     1,
   322,   370,     2,   324,   325,   247,   367,   313,     3,   335,
     4,   351,   340,     5,     6,   376,   369,   352,   329,   331,
   372,   -27,     7,    52,     8,     9,   374,    53,   365,    54,
   407,   414,   402,   416,   332,     5,   417,    10,   403,   158,
   387,   425,    11,    12,   397,   388,    13,   426,   270,   436,
    14,    15,    16,    17,    18,   380,   439,    60,   446,   449,
   450,   455,   404,   456,   457,   461,    62,   126,   466,   318,
   411,   329,   331,   487,   488,   500,   506,   496,   507,   319,
   276,   353,   419,   405,   406,   354,    65,   332,   355,   420,
   473,   438,   421,    68,   464,    79,   299,    81,   489,   492,
   440,   423,   308,   463,   424,   132,     0,     0,   434,   115,
     0,     0,     0,   113,   491,   238,     0,   114,    98,   502,
   494,   441,     0,     0,     0,     0,     0,     0,   444,     0,
     0,     0,     0,     0,     0,   451,   452,     0,   454,     0,
     0,     0,     0,     0,   460,     0,     0,     0,     0,   462,
     0,     0,     0,     0,     0,   467,     0,   468,     0,   469,
   470,     0,     0,     0,     0,     0,     0,   482,     0,   483,
     0,     0,     0,     0,     0,   490,     0,     0,     0,     0,
   495,     0,     0,   497,     0,   498,     0,     0,     0,     0,
   501,   257,   503,  -256,     0,  -256,  -243,  -256,   504,  -256,
     3,     0,     0,     0,  -256,     5,     6,   272,     0,     0,
  -256,     0,     0,     0,     0,  -256,     0,     9,  -256,  -256,
   258,     0,   273,   274,     0,   259,     0,  -256,  -256,    10,
     0,     0,     0,     0,    11,    12,  -256,  -256,     0,  -256,
  -256,  -256,    14,     0,    16,    17,    18,     0,     0,   257,
     0,  -256,     0,  -256,  -243,  -256,  -256,  -256,     3,     0,
     0,   275,  -256,     5,     6,     0,     0,     0,  -256,     0,
     0,     0,     0,  -256,     0,     9,  -256,  -256,   258,     0,
     0,     0,     0,   259,     0,  -256,  -256,    10,     0,     0,
     0,     0,    11,    12,  -256,  -256,     0,  -256,  -256,  -256,
    14,     0,    16,    17,    18,     0,     0,   257,     0,  -256,
     0,  -256,  -243,  -256,  -256,  -256,     3,     0,     0,   -30,
  -256,     5,     6,     0,     0,     0,  -256,     0,     0,     0,
     0,  -256,     0,     9,  -256,  -256,   258,     0,     0,     0,
     0,   259,     0,  -256,  -256,    10,     0,     0,     0,     0,
    11,    12,  -256,  -256,     0,  -256,  -256,  -256,    14,     0,
    16,    17,    18,     0,     0,   257,     0,  -256,     0,  -256,
  -243,  -256,  -256,  -256,     3,     0,     0,   400,  -256,     5,
     6,     0,     0,     0,  -256,     0,     0,     0,     0,  -256,
     0,     9,  -256,  -256,   258,     0,     0,     0,     0,   259,
     0,  -256,  -256,    10,     0,     0,     0,     0,    11,    12,
  -256,  -256,     0,  -256,  -256,  -256,    14,     0,    16,    17,
    18,     0,     0,   341,     0,    52,     0,    91,     0,    53,
  -256,    54,     0,     0,     0,   422,    55,     5,     0,     0,
     0,    92,    57,     0,     0,     0,     0,    58,     0,     0,
    93,    59,     0,     0,     0,     0,     0,     0,    94,    60,
    61,    95,     0,     0,     0,     0,     0,    96,    62,    97,
     0,     0,    63,    64,     0,     0,   341,     0,    52,     0,
    91,     0,    53,     0,    54,     0,     0,     0,    65,    55,
     5,     0,     0,   385,    92,    57,     0,     0,     0,     0,
    58,     0,     0,    93,    59,     0,     0,     0,     0,     0,
     0,    94,    60,    61,    95,     0,     0,     0,     0,     0,
    96,    62,    97,     0,     0,    63,    64,     0,     1,     0,
     0,     2,     0,     0,     0,     0,     0,     3,     0,     4,
     0,    65,     5,     6,     0,     0,   398,     0,     0,     0,
   -27,     7,     0,     8,     9,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
     0,    11,    12,     0,     0,    13,     0,     0,     0,    14,
    15,    16,    17,    18,    52,     0,    91,     0,    53,     0,
    54,     0,     0,     0,     0,    55,     5,     0,   371,     0,
    92,    57,     0,     0,     0,     0,    58,     0,     0,    93,
    59,     0,     0,     0,     0,     0,     0,    94,    60,    61,
    95,   177,     0,     0,     0,     0,    96,    62,    97,     0,
     0,    63,    64,     0,     0,     0,   341,     0,    52,     0,
    91,     0,    53,     0,    54,     0,     0,    65,     0,    55,
     5,   -65,     0,   178,    92,    57,     0,     0,     0,     0,
    58,     0,     0,    93,    59,     0,     0,     0,     0,     0,
     0,    94,    60,    61,    95,     0,     0,     0,     0,     0,
    96,    62,    97,     0,     0,    63,    64,    52,     0,    91,
     0,    53,   475,    54,     0,     0,     0,   476,    55,     5,
     0,    65,     0,    92,    57,     0,     0,     0,     0,    58,
     0,     0,    93,    59,     0,     0,     0,     0,     0,     0,
    94,    60,    61,    95,     0,     0,     0,     0,     0,    96,
    62,    97,     0,     0,    63,    64,    52,     0,    91,     0,
    53,     0,    54,     0,     0,     0,     0,    55,     5,     0,
    65,     0,    92,    57,     0,     0,     0,     0,    58,     0,
     0,    93,    59,     0,     0,     0,     0,     0,     0,    94,
    60,    61,    95,     0,     0,     0,     0,     0,    96,    62,
    97,     0,     0,    63,    64,    52,     0,    91,     0,    53,
     0,    54,     0,     0,     0,     0,    55,     0,     0,    65,
     0,    92,    57,     0,     0,     0,     0,    58,     0,     0,
    93,    59,     0,     0,     0,     0,     0,     0,    94,    60,
    61,     0,     0,     0,     0,     0,     0,     0,    62,    97,
     0,     0,    63,    64,    52,     0,    91,     0,    53,     0,
    54,     0,     0,     0,     0,    55,     0,     0,    65,     0,
     0,    57,     0,     0,     0,     0,    58,     0,     0,    93,
    59,     0,     0,     0,     0,     0,     0,     0,    60,    61,
     0,     0,     0,     0,     0,     0,     0,    62,    97,     0,
   328,    63,    64,    52,     0,    91,     0,    53,     0,    54,
     0,     0,     0,     0,    55,     0,     0,    65,     0,     0,
    57,     0,     0,     0,     0,    58,     0,     0,    93,    59,
     0,     0,     0,     0,     0,     0,     0,    60,    61,     0,
     0,     0,     0,     0,     0,     0,    62,    97,    52,     0,
    63,    64,    53,     0,    54,     0,     0,     0,     0,    55,
     0,     0,     0,     0,    56,    57,    65,     0,     0,     0,
    58,     0,     0,     0,    59,     0,     0,    -1,     1,     0,
     0,     2,    60,    61,     0,     0,     0,     3,     0,     4,
     0,    62,     5,     6,     0,    63,    64,     0,     0,     0,
   -27,     7,     0,     8,     9,     0,     0,     0,     0,     0,
     0,    65,     0,     0,     0,     0,    10,     0,     0,     0,
     0,    11,    12,     0,     0,    13,     0,     0,     0,    14,
    15,    16,    17,    18,    -2,     1,     0,     0,     2,     0,
     0,     0,     0,     0,     3,     0,     4,     0,     0,     5,
     6,     0,     0,     0,     0,     0,     0,   -27,     7,     0,
     8,     9,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    10,     0,     0,     0,     0,    11,    12,
     0,     0,    13,     0,     0,     0,    14,    15,    16,    17,
    18,     1,     0,     0,     2,     0,     0,     0,     0,     0,
     3,     0,     4,     0,     0,     5,     6,     0,     0,     0,
     0,     0,     0,   -27,     7,     0,     8,     9,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    10,
     0,     0,     0,     0,    11,    12,     0,     0,    13,     0,
     0,     0,    14,    15,    16,    17,    18
};

static const short yycheck[] = {    15,
    11,     3,     3,     3,    11,    11,     3,     0,    11,    11,
    19,     3,   309,   268,    16,    17,   323,     3,   212,   195,
     1,   197,   195,     1,   197,   195,    19,   197,   162,     1,
   373,     1,    40,   167,    73,    40,     1,    71,     3,    73,
    21,   235,    25,   312,     1,   156,     3,   286,    87,    21,
    22,    69,    14,     1,    37,   166,     1,   192,     3,    31,
     3,    48,     1,    25,    72,    70,   335,    72,   323,    21,
    22,    67,    68,   380,    52,     3,    54,    55,    56,    31,
    52,    57,    54,    55,    56,    59,     8,    63,    57,    58,
    18,    13,    66,    37,    75,    39,    74,    41,   441,    43,
    70,    66,     3,    75,    52,   239,    54,    55,    56,    66,
   304,   122,   351,   129,    42,   122,   122,    18,   253,   122,
   122,    66,    70,    66,    63,   380,   433,    63,     1,    48,
    66,    59,    60,    61,    62,    63,    64,    65,    66,    21,
    22,    42,    57,    69,   137,   343,    74,    73,    63,    31,
     3,   349,    80,    81,     1,    57,    58,    85,    59,    60,
    61,    62,    63,    64,    65,    66,   168,     1,    82,    83,
    84,   305,    69,    74,   350,   177,    73,   350,   433,    52,
   350,    54,    55,    56,     1,    73,    52,    75,    54,    55,
    56,    58,   339,    75,   491,   342,    73,    70,    75,   192,
    80,    81,   195,    69,   197,    52,     3,    54,    55,    56,
     3,    73,    52,    75,    54,    55,    56,     3,    52,     3,
    54,    55,    56,    70,    41,   401,    66,     3,   401,   173,
    52,   401,    54,    55,    56,    52,    70,    54,    55,    56,
    52,    63,    54,    55,    56,   254,   292,   293,   250,   296,
   297,   298,   196,     3,   198,    69,   200,   201,   294,   295,
   253,   254,    69,    23,    69,    69,   268,   268,   279,    70,
    69,   282,   279,   279,    69,   282,   279,   279,     3,   282,
   282,   475,   268,    86,    86,     3,    66,     3,     3,     3,
    69,     3,    86,     3,    86,    69,    57,    69,   242,    57,
    70,    69,   246,     3,    70,    41,    70,    70,   317,     3,
   312,    76,    25,    88,    73,    43,    70,    90,    70,    74,
    71,   323,   323,   267,   317,    70,    79,    64,    77,    63,
    78,    87,   343,   335,   345,    73,   343,   323,   349,   283,
   343,   343,   349,   345,    87,   345,   349,   349,   345,    73,
    40,    59,    69,   345,     6,     3,     3,   350,    69,     1,
    69,    57,     4,    69,    69,   367,   310,   369,    10,    72,
    12,    70,    74,    15,    16,     3,    73,    75,   380,   380,
    71,    23,    24,     3,    26,    27,    74,     7,    89,     9,
     3,    75,    87,    75,   380,    15,    73,    39,    87,    25,
   344,    73,    44,    45,   348,    25,    48,    75,   401,     3,
    52,    53,    54,    55,    56,    21,    75,    37,    34,    69,
    69,     3,   366,    74,    11,    70,    46,    63,    74,    71,
   374,   433,   433,    72,    71,    69,     0,    72,     0,   255,
   197,   289,   386,   367,   369,   290,    66,   433,   291,   393,
   466,   417,   396,     3,   456,     3,   225,     3,   478,   480,
   421,   405,   240,   454,   408,    18,    -1,    -1,   412,   480,
    -1,    -1,    -1,   480,   480,   168,    -1,   480,   480,   495,
   482,   425,    -1,    -1,    -1,    -1,    -1,    -1,   432,    -1,
    -1,    -1,    -1,    -1,    -1,   439,   440,    -1,   442,    -1,
    -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,   453,
    -1,    -1,    -1,    -1,    -1,   459,    -1,   461,    -1,   463,
   464,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,   473,
    -1,    -1,    -1,    -1,    -1,   479,    -1,    -1,    -1,    -1,
   484,    -1,    -1,   487,    -1,   489,    -1,    -1,    -1,    -1,
   494,     1,   496,     3,    -1,     5,     6,     7,   502,     9,
    10,    -1,    -1,    -1,    14,    15,    16,    17,    -1,    -1,
    20,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,
    30,    -1,    32,    33,    -1,    35,    -1,    37,    38,    39,
    -1,    -1,    -1,    -1,    44,    45,    46,    47,    -1,    49,
    50,    51,    52,    -1,    54,    55,    56,    -1,    -1,     1,
    -1,     3,    -1,     5,     6,     7,    66,     9,    10,    -1,
    -1,    71,    14,    15,    16,    -1,    -1,    -1,    20,    -1,
    -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,    -1,
    -1,    -1,    -1,    35,    -1,    37,    38,    39,    -1,    -1,
    -1,    -1,    44,    45,    46,    47,    -1,    49,    50,    51,
    52,    -1,    54,    55,    56,    -1,    -1,     1,    -1,     3,
    -1,     5,     6,     7,    66,     9,    10,    -1,    -1,    71,
    14,    15,    16,    -1,    -1,    -1,    20,    -1,    -1,    -1,
    -1,    25,    -1,    27,    28,    29,    30,    -1,    -1,    -1,
    -1,    35,    -1,    37,    38,    39,    -1,    -1,    -1,    -1,
    44,    45,    46,    47,    -1,    49,    50,    51,    52,    -1,
    54,    55,    56,    -1,    -1,     1,    -1,     3,    -1,     5,
     6,     7,    66,     9,    10,    -1,    -1,    71,    14,    15,
    16,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,    25,
    -1,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
    -1,    37,    38,    39,    -1,    -1,    -1,    -1,    44,    45,
    46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
    56,    -1,    -1,     1,    -1,     3,    -1,     5,    -1,     7,
    66,     9,    -1,    -1,    -1,    71,    14,    15,    -1,    -1,
    -1,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,
    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,
    38,    39,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,
    -1,    -1,    50,    51,    -1,    -1,     1,    -1,     3,    -1,
     5,    -1,     7,    -1,     9,    -1,    -1,    -1,    66,    14,
    15,    -1,    -1,    71,    19,    20,    -1,    -1,    -1,    -1,
    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
    -1,    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
    45,    46,    47,    -1,    -1,    50,    51,    -1,     1,    -1,
    -1,     4,    -1,    -1,    -1,    -1,    -1,    10,    -1,    12,
    -1,    66,    15,    16,    -1,    -1,    71,    -1,    -1,    -1,
    23,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,
    -1,    44,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,
    53,    54,    55,    56,     3,    -1,     5,    -1,     7,    -1,
     9,    -1,    -1,    -1,    -1,    14,    15,    -1,    71,    -1,
    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,    38,
    39,    40,    -1,    -1,    -1,    -1,    45,    46,    47,    -1,
    -1,    50,    51,    -1,    -1,    -1,     1,    -1,     3,    -1,
     5,    -1,     7,    -1,     9,    -1,    -1,    66,    -1,    14,
    15,    70,    -1,    72,    19,    20,    -1,    -1,    -1,    -1,
    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,
    -1,    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
    45,    46,    47,    -1,    -1,    50,    51,     3,    -1,     5,
    -1,     7,     8,     9,    -1,    -1,    -1,    13,    14,    15,
    -1,    66,    -1,    19,    20,    -1,    -1,    -1,    -1,    25,
    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,
    36,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,    45,
    46,    47,    -1,    -1,    50,    51,     3,    -1,     5,    -1,
     7,    -1,     9,    -1,    -1,    -1,    -1,    14,    15,    -1,
    66,    -1,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,
    -1,    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,
    37,    38,    39,    -1,    -1,    -1,    -1,    -1,    45,    46,
    47,    -1,    -1,    50,    51,     3,    -1,     5,    -1,     7,
    -1,     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    66,
    -1,    19,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,
    28,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,    37,
    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,
    -1,    -1,    50,    51,     3,    -1,     5,    -1,     7,    -1,
     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    66,    -1,
    -1,    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,
    29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,    -1,
    49,    50,    51,     3,    -1,     5,    -1,     7,    -1,     9,
    -1,    -1,    -1,    -1,    14,    -1,    -1,    66,    -1,    -1,
    20,    -1,    -1,    -1,    -1,    25,    -1,    -1,    28,    29,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,     3,    -1,
    50,    51,     7,    -1,     9,    -1,    -1,    -1,    -1,    14,
    -1,    -1,    -1,    -1,    19,    20,    66,    -1,    -1,    -1,
    25,    -1,    -1,    -1,    29,    -1,    -1,     0,     1,    -1,
    -1,     4,    37,    38,    -1,    -1,    -1,    10,    -1,    12,
    -1,    46,    15,    16,    -1,    50,    51,    -1,    -1,    -1,
    23,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    66,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,
    -1,    44,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,
    53,    54,    55,    56,     0,     1,    -1,    -1,     4,    -1,
    -1,    -1,    -1,    -1,    10,    -1,    12,    -1,    -1,    15,
    16,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,    44,    45,
    -1,    -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,
    56,     1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,
    10,    -1,    12,    -1,    -1,    15,    16,    -1,    -1,    -1,
    -1,    -1,    -1,    23,    24,    -1,    26,    27,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
    -1,    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    -1,
    -1,    -1,    52,    53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 401 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 2:
#line 402 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = yyvsp[0].decl_val;
      AST::tree()->setDeclarations(yyvsp[0].decl_val);
    ;
    break;}
case 3:
#line 409 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 4:
#line 410 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 5:
#line 417 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 6:
#line 418 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 7:
#line 419 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 8:
#line 420 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 9:
#line 421 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].module_val; ;
    break;}
case 10:
#line 422 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].value_base_val; ;
    break;}
case 11:
#line 423 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 12:
#line 424 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 13:
#line 425 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in definition");
      yyval.decl_val = 0;
    ;
    break;}
case 14:
#line 432 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-4].module_val;
    ;
    break;}
case 15:
#line 436 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition");
    ;
    break;}
case 16:
#line 439 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].module_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.module_val = yyvsp[-5].module_val;
    ;
    break;}
case 17:
#line 443 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in module definition (no body found)");
      yyvsp[-1].module_val->finishConstruction(0);
      yyval.module_val = yyvsp[-1].module_val;
    ;
    break;}
case 18:
#line 452 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.module_val = new Module(currentFile, yylineno, mainFile, yyvsp[0].id_val); ;
    break;}
case 19:
#line 456 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].interface_val; ;
    break;}
case 20:
#line 457 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].forward_val; ;
    break;}
case 21:
#line 461 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-3].interface_val;
    ;
    break;}
case 22:
#line 465 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition");
    ;
    break;}
case 23:
#line 468 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].interface_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.interface_val = yyvsp[-5].interface_val;
    ;
    break;}
case 24:
#line 472 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in interface definition (no body found)");
      yyvsp[-1].interface_val->finishConstruction(0);
      yyval.interface_val = yyvsp[-1].interface_val;
    ;
    break;}
case 25:
#line 481 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.forward_val = new Forward(currentFile, yylineno, mainFile, yyvsp[0].id_val, yyvsp[-2].int_val==1, yyvsp[-2].int_val==2);
    ;
    break;}
case 26:
#line 488 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.interface_val = new Interface(currentFile, yylineno, mainFile,
			 yyvsp[-2].id_val, yyvsp[-4].int_val==1, yyvsp[-4].int_val==2, yyvsp[0].inheritspec_val);
    ;
    break;}
case 27:
#line 495 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 0; ;
    break;}
case 28:
#line 496 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 1; ;
    break;}
case 29:
#line 497 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 2; ;
    break;}
case 30:
#line 501 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 31:
#line 505 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 32:
#line 506 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 33:
#line 513 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].decl_val; ;
    break;}
case 34:
#line 514 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].const_val; ;
    break;}
case 35:
#line 515 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].exception_val; ;
    break;}
case 36:
#line 516 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].attribute_val; ;
    break;}
case 37:
#line 517 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[-1].operation_val; ;
    break;}
case 38:
#line 518 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 39:
#line 519 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in interface body");
      yyval.decl_val = 0;
    ;
    break;}
case 40:
#line 526 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = 0; ;
    break;}
case 41:
#line 527 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 42:
#line 531 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.inheritspec_val = yyvsp[0].inheritspec_val; ;
    break;}
case 43:
#line 535 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
      if (!yyval.inheritspec_val->interface()) {
	delete yyval.inheritspec_val;
	yyval.inheritspec_val = 0;
      }
    ;
    break;}
case 44:
#line 542 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].inheritspec_val) {
	yyvsp[-4].inheritspec_val->append(new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.inheritspec_val = yyvsp[-4].inheritspec_val;
      }
      else yyval.inheritspec_val = new InheritSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 45:
#line 550 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in inheritance list");
      yyval.inheritspec_val = 0;
    ;
    break;}
case 46:
#line 558 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 47:
#line 562 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 0);
    ;
    break;}
case 48:
#line 565 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.scopedname_val = new ScopedName(yyvsp[0].id_val, 1);
    ;
    break;}
case 49:
#line 568 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].scopedname_val->append(yyvsp[0].id_val);
      yyval.scopedname_val=yyvsp[-2].scopedname_val;
    ;
    break;}
case 50:
#line 579 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_val; ;
    break;}
case 51:
#line 580 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_abs_val; ;
    break;}
case 52:
#line 581 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_box_val; ;
    break;}
case 53:
#line 582 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.value_base_val = yyvsp[0].value_forward_val; ;
    break;}
case 54:
#line 586 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val);
    ;
    break;}
case 55:
#line 589 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_forward_val = new ValueForward(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val);
    ;
    break;}
case 56:
#line 595 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_box_val = new ValueBox(currentFile, yylineno, mainFile,
			yyvsp[-1].id_val, yyvsp[0].type_spec_val->type(), yyvsp[0].type_spec_val->constr());
      delete yyvsp[0].type_spec_val;
    ;
    break;}
case 57:
#line 603 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 58:
#line 605 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 59:
#line 610 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack = new ValueAbs(currentFile, yylineno, mainFile, yyvsp[-1].id_val,
				   yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 60:
#line 614 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      valueabs_hack->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_abs_val = valueabs_hack;
      valueabs_hack = 0;
    ;
    break;}
case 61:
#line 619 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in abstract valuetype");
      if (valueabs_hack) {
	valueabs_hack->finishConstruction(0);
	yyval.value_abs_val = valueabs_hack;
	valueabs_hack = 0;
      }
      else yyval.value_abs_val = 0;
    ;
    break;}
case 62:
#line 632 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].value_val->finishConstruction(yyvsp[-1].decl_val);
      yyval.value_val = yyvsp[-3].value_val;
    ;
    break;}
case 63:
#line 639 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 64:
#line 644 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[-1].id_val,
		     yyvsp[0].valueinheritsupportspec_val->inherits(), yyvsp[0].valueinheritsupportspec_val->supports());
      delete yyvsp[0].valueinheritsupportspec_val;
    ;
    break;}
case 65:
#line 649 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 0, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 66:
#line 652 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.value_val = new Value(currentFile, yylineno, mainFile, 1, yyvsp[0].id_val, 0, 0);
    ;
    break;}
case 67:
#line 658 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[-2].valueinheritspec_val, yyvsp[0].inheritspec_val);
    ;
    break;}
case 68:
#line 661 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(yyvsp[0].valueinheritspec_val, 0);
    ;
    break;}
case 69:
#line 664 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritsupportspec_val = new ValueInheritSupportSpec(0, yyvsp[0].inheritspec_val);
    ;
    break;}
case 70:
#line 670 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].boolean_val) yyvsp[0].valueinheritspec_val->setTruncatable();
      yyval.valueinheritspec_val = yyvsp[0].valueinheritspec_val;
    ;
    break;}
case 71:
#line 677 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 72:
#line 678 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 73:
#line 682 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
      if (!yyval.valueinheritspec_val->value()) {
	delete yyval.valueinheritspec_val;
	yyval.valueinheritspec_val = 0;
      }
    ;
    break;}
case 74:
#line 689 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].valueinheritspec_val) {
	yyvsp[-2].valueinheritspec_val->append(new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno),
		   currentFile, yylineno);
	yyval.valueinheritspec_val = yyvsp[-2].valueinheritspec_val;
      }
      else yyval.valueinheritspec_val = new ValueInheritSpec(yyvsp[0].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 75:
#line 700 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.scopedname_val = yyvsp[0].scopedname_val; ;
    break;}
case 76:
#line 704 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = 0; ;
    break;}
case 77:
#line 705 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].decl_val) { yyvsp[-1].decl_val->append(yyvsp[0].decl_val); yyval.decl_val = yyvsp[-1].decl_val; }
      else yyval.decl_val = yyvsp[0].decl_val;
    ;
    break;}
case 78:
#line 712 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 79:
#line 713 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].statemember_val; ;
    break;}
case 80:
#line 714 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].factory_val; ;
    break;}
case 81:
#line 718 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.statemember_val = new StateMember(currentFile, yylineno, mainFile,
			   yyvsp[-3].ulong_val, yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 82:
#line 726 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 0; ;
    break;}
case 83:
#line 727 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.ulong_val = 1; ;
    break;}
case 84:
#line 731 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].factory_val->closeParens();
    ;
    break;}
case 85:
#line 733 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].factory_val->finishConstruction(yyvsp[-3].parameter_val);
      yyval.factory_val = yyvsp[-5].factory_val;
    ;
    break;}
case 86:
#line 737 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-3].factory_val->closeParens();
    ;
    break;}
case 87:
#line 739 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in factory parameters");
      yyvsp[-5].factory_val->finishConstruction(0);
      yyval.factory_val = yyvsp[-5].factory_val;
    ;
    break;}
case 88:
#line 748 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.factory_val = new Factory(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 89:
#line 754 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 90:
#line 755 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 91:
#line 759 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[0].parameter_val; ;
    break;}
case 92:
#line 760 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].parameter_val) { yyvsp[-2].parameter_val->append(yyvsp[0].parameter_val); yyval.parameter_val = yyvsp[-2].parameter_val; }
      else yyval.parameter_val = yyvsp[0].parameter_val;
    ;
    break;}
case 93:
#line 767 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, 0, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 94:
#line 775 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.const_val = new Const(currentFile, yylineno, mainFile, yyvsp[-3].type_val, yyvsp[-2].id_val, yyvsp[0].expr_val);
    ;
    break;}
case 95:
#line 781 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 96:
#line 782 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 97:
#line 783 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 98:
#line 784 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 99:
#line 785 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 100:
#line 786 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 101:
#line 787 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 102:
#line 788 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 103:
#line 789 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 104:
#line 792 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 105:
#line 796 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 106:
#line 800 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 107:
#line 801 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new OrExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 108:
#line 805 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 109:
#line 806 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new XorExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 110:
#line 810 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 111:
#line 811 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new AndExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 112:
#line 817 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 113:
#line 818 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new RShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 114:
#line 821 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
    yyval.expr_val = new LShiftExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
  ;
    break;}
case 115:
#line 827 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 116:
#line 828 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new AddExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 117:
#line 829 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = new SubExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val); ;
    break;}
case 118:
#line 833 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 119:
#line 834 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new MultExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 120:
#line 837 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new DivExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 121:
#line 840 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new ModExpr(currentFile, yylineno, yyvsp[-2].expr_val, yyvsp[0].expr_val);
    ;
    break;}
case 122:
#line 846 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].char_val == '-') yyval.expr_val = new MinusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '+') yyval.expr_val = new PlusExpr(currentFile, yylineno, yyvsp[0].expr_val);
      if (yyvsp[-1].char_val == '~') yyval.expr_val = new InvertExpr(currentFile, yylineno, yyvsp[0].expr_val);
    ;
    break;}
case 123:
#line 851 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 124:
#line 855 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '-'; ;
    break;}
case 125:
#line 856 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '+'; ;
    break;}
case 126:
#line 857 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.char_val = '~'; ;
    break;}
case 127:
#line 861 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = IdlExpr::scopedNameToExpr(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 128:
#line 864 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[0].expr_val; ;
    break;}
case 129:
#line 865 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.expr_val = yyvsp[-1].expr_val; ;
    break;}
case 130:
#line 869 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new IntegerExpr(currentFile, yylineno, yyvsp[0].int_literal_val);
    ;
    break;}
case 131:
#line 872 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new StringExpr(currentFile, yylineno, yyvsp[0].string_val);
    ;
    break;}
case 132:
#line 875 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WStringExpr(currentFile, yylineno, yyvsp[0].wstring_val);
    ;
    break;}
case 133:
#line 878 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new CharExpr(currentFile, yylineno, yyvsp[0].char_val);
    ;
    break;}
case 134:
#line 881 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new WCharExpr(currentFile, yylineno, yyvsp[0].wchar_val);
    ;
    break;}
case 135:
#line 884 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FixedExpr(currentFile, yylineno, yyvsp[0].fixed_val);
    ;
    break;}
case 136:
#line 887 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new FloatExpr(currentFile, yylineno, yyvsp[0].float_literal_val);
    ;
    break;}
case 137:
#line 890 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.expr_val = new BooleanExpr(currentFile, yylineno, yyvsp[0].boolean_val);
    ;
    break;}
case 138:
#line 896 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 139:
#line 897 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
case 140:
#line 907 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.wstring_val = yyvsp[0].wstring_val; ;
    break;}
case 141:
#line 908 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.wstring_val = new IDL_WChar [idl_wstrlen(yyvsp[-1].wstring_val) + idl_wstrlen(yyvsp[0].wstring_val) + 1];
      idl_wstrcpy(yyval.wstring_val, yyvsp[-1].wstring_val);
      idl_wstrcat(yyval.wstring_val, yyvsp[0].wstring_val);
      delete [] yyvsp[-1].wstring_val;
      delete [] yyvsp[0].wstring_val;
    ;
    break;}
case 142:
#line 918 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 143:
#line 919 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 144:
#line 923 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlLongVal v = yyvsp[0].expr_val->evalAsLongV();
      if (v.negative || v.u == 0)
	IdlError(currentFile, yylineno, "Size must be at least 1");
      yyval.ulong_val = v.u;
    ;
    break;}
case 145:
#line 932 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].typedef_val; ;
    break;}
case 146:
#line 933 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].struct_val; ;
    break;}
case 147:
#line 934 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].union_val; ;
    break;}
case 148:
#line 935 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].enum_val; ;
    break;}
case 149:
#line 936 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new Native(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 150:
#line 939 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.decl_val = yyvsp[0].decl_val; ;
    break;}
case 151:
#line 943 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.typedef_val = new Typedef(currentFile, yylineno, mainFile,
		       yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
      delete yyvsp[-1].type_spec_val;
    ;
    break;}
case 152:
#line 951 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 153:
#line 952 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 1); ;
    break;}
case 154:
#line 956 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 155:
#line 957 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 156:
#line 958 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 157:
#line 964 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 158:
#line 965 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 159:
#line 966 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 160:
#line 967 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 161:
#line 968 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 162:
#line 969 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 163:
#line 970 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 164:
#line 971 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 165:
#line 972 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 166:
#line 976 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 167:
#line 977 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 168:
#line 978 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 169:
#line 979 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 170:
#line 983 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].struct_val->thisType(); ;
    break;}
case 171:
#line 984 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].union_val->thisType(); ;
    break;}
case 172:
#line 985 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].enum_val->thisType(); ;
    break;}
case 173:
#line 989 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 174:
#line 990 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 175:
#line 997 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 176:
#line 998 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 177:
#line 1002 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[0].id_val, 0);
    ;
    break;}
case 178:
#line 1008 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[0].declarator_val; ;
    break;}
case 179:
#line 1012 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::floatType; ;
    break;}
case 180:
#line 1013 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::doubleType; ;
    break;}
case 181:
#line 1014 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longdoubleType; ;
    break;}
case 182:
#line 1018 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 183:
#line 1019 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 184:
#line 1023 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 185:
#line 1024 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 186:
#line 1025 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 187:
#line 1029 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::shortType; ;
    break;}
case 188:
#line 1033 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longType; ;
    break;}
case 189:
#line 1037 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::longlongType; ;
    break;}
case 190:
#line 1041 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 191:
#line 1042 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 192:
#line 1043 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 193:
#line 1047 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ushortType; ;
    break;}
case 194:
#line 1051 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulongType; ;
    break;}
case 195:
#line 1055 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::ulonglongType; ;
    break;}
case 196:
#line 1059 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::charType; ;
    break;}
case 197:
#line 1063 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::wcharType; ;
    break;}
case 198:
#line 1067 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::booleanType; ;
    break;}
case 199:
#line 1071 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::octetType; ;
    break;}
case 200:
#line 1075 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::anyType; ;
    break;}
case 201:
#line 1079 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = DeclaredType::corbaObjectType; ;
    break;}
case 202:
#line 1083 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].struct_val->finishConstruction(yyvsp[-1].member_val);
      yyval.struct_val = yyvsp[-5].struct_val;
    ;
    break;}
case 203:
#line 1087 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in struct definition");
      yyvsp[-1].struct_val->finishConstruction(0);
      yyval.struct_val = yyvsp[-1].struct_val;
    ;
    break;}
case 204:
#line 1096 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.struct_val = new Struct(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 205:
#line 1102 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = yyvsp[-1].member_val; ;
    break;}
case 206:
#line 1103 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-2].member_val) { yyvsp[-2].member_val->append(yyvsp[-1].member_val); yyval.member_val = yyvsp[-2].member_val; }
      else yyval.member_val = yyvsp[-1].member_val;
    ;
    break;}
case 207:
#line 1110 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.member_val = new Member(currentFile, yylineno, mainFile,
		      yyvsp[-2].type_spec_val->type(), yyvsp[-2].type_spec_val->constr(), yyvsp[-1].declarator_val);
      delete yyvsp[-2].type_spec_val;
    ;
    break;}
case 208:
#line 1115 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in member declaration");
      yyval.member_val = 0;
    ;
    break;}
case 209:
#line 1125 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{

      yyvsp[-12].union_val->finishConstruction(yyvsp[-7].type_spec_val->type(), yyvsp[-7].type_spec_val->constr(), yyvsp[-1].union_case_val);
      delete yyvsp[-7].type_spec_val;
      yyval.union_val = yyvsp[-12].union_val;
    ;
    break;}
case 210:
#line 1131 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in union declaration");
      yyvsp[-1].union_val->finishConstruction(0, 0, 0);
      yyval.union_val = yyvsp[-1].union_val;
    ;
    break;}
case 211:
#line 1140 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_val = new Union(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 212:
#line 1146 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 213:
#line 1147 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 214:
#line 1148 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].type_val, 0); ;
    break;}
case 215:
#line 1149 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_spec_val = new TypeSpec(yyvsp[0].enum_val->thisType(), 1); ;
    break;}
case 216:
#line 1150 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_spec_val = new TypeSpec(IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val),
			0);
    ;
    break;}
case 217:
#line 1157 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[0].union_case_val; ;
    break;}
case 218:
#line 1161 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.union_case_val = yyvsp[-1].union_case_val; ;
    break;}
case 219:
#line 1162 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].union_case_val->append(yyvsp[-1].union_case_val);
      yyval.union_case_val = yyvsp[-2].union_case_val;
    ;
    break;}
case 220:
#line 1169 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].union_case_val->finishConstruction(yyvsp[-2].case_label_val);
      yyval.union_case_val = yyvsp[-1].union_case_val;
    ;
    break;}
case 221:
#line 1176 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.case_label_val = yyvsp[0].case_label_val; ;
    break;}
case 222:
#line 1177 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].case_label_val->append(yyvsp[0].case_label_val);
      yyval.case_label_val = yyvsp[-1].case_label_val;
    ;
    break;}
case 223:
#line 1184 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, yyvsp[-2].expr_val);
    ;
    break;}
case 224:
#line 1187 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.case_label_val = new CaseLabel(currentFile, yylineno, mainFile, 0);
    ;
    break;}
case 225:
#line 1193 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.union_case_val = new UnionCase(currentFile, yylineno, mainFile,
			 yyvsp[-1].type_spec_val->type(), yyvsp[-1].type_spec_val->constr(), yyvsp[0].declarator_val);
    ;
    break;}
case 226:
#line 1200 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].enum_val->finishConstruction(yyvsp[-1].enumerator_val);
      yyval.enum_val = yyvsp[-5].enum_val;
    ;
    break;}
case 227:
#line 1204 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Syntax error in enum definition");
      yyvsp[-1].enum_val->finishConstruction(0);
      yyval.enum_val = yyvsp[-1].enum_val;
    ;
    break;}
case 228:
#line 1212 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.enum_val = new Enum(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 229:
#line 1218 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.enumerator_val = yyvsp[-1].enumerator_val; ;
    break;}
case 230:
#line 1219 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].enumerator_val->append(yyvsp[-1].enumerator_val);
      yyval.enumerator_val = yyvsp[-4].enumerator_val;
    ;
    break;}
case 231:
#line 1226 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.enumerator_val = new Enumerator(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 232:
#line 1232 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-3].type_val, yyvsp[-1].ulong_val);
    ;
    break;}
case 233:
#line 1235 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new SequenceType(yyvsp[-1].type_val, 0);
    ;
    break;}
case 234:
#line 1241 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new StringType(yyvsp[-1].ulong_val); ;
    break;}
case 235:
#line 1242 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = StringType::unboundedStringType;
    ;
    break;}
case 236:
#line 1248 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new WStringType(yyvsp[-1].ulong_val); ;
    break;}
case 237:
#line 1249 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = WStringType::unboundedWStringType;
    ;
    break;}
case 238:
#line 1255 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.declarator_val = new Declarator(currentFile, yylineno, mainFile, yyvsp[-1].id_val, yyvsp[0].array_size_val);
    ;
    break;}
case 239:
#line 1261 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = yyvsp[0].array_size_val; ;
    break;}
case 240:
#line 1262 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-1].array_size_val->append(yyvsp[0].array_size_val);
      yyval.array_size_val = yyvsp[-1].array_size_val;
    ;
    break;}
case 241:
#line 1269 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.array_size_val = new ArraySize(yyvsp[-1].ulong_val); ;
    break;}
case 242:
#line 1273 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.attribute_val = new Attribute(currentFile, yylineno, mainFile, yyvsp[-3].boolean_val, yyvsp[-1].type_val, yyvsp[0].declarator_val);
    ;
    break;}
case 243:
#line 1279 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 244:
#line 1280 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 245:
#line 1284 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.declarator_val = yyvsp[-1].declarator_val; ;
    break;}
case 246:
#line 1285 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].declarator_val) { yyvsp[-4].declarator_val->append(yyvsp[-1].declarator_val); yyval.declarator_val = yyvsp[-4].declarator_val; }
      else yyval.declarator_val = yyvsp[-1].declarator_val;
    ;
    break;}
case 247:
#line 1292 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-5].exception_val->finishConstruction(yyvsp[-1].member_val);
      yyval.exception_val = yyvsp[-5].exception_val;
    ;
    break;}
case 248:
#line 1296 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in exception definition");
      yyvsp[-1].exception_val->finishConstruction(0);
      yyval.exception_val = yyvsp[-1].exception_val;
    ;
    break;}
case 249:
#line 1305 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.exception_val = new Exception(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 250:
#line 1311 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.member_val = 0; ;
    break;}
case 251:
#line 1312 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-1].member_val) { yyvsp[-1].member_val->append(yyvsp[0].member_val);	yyval.member_val = yyvsp[-1].member_val; }
      else yyval.member_val = yyvsp[0].member_val;
    ;
    break;}
case 252:
#line 1319 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-2].operation_val->closeParens();
    ;
    break;}
case 253:
#line 1321 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-6].operation_val->finishConstruction(yyvsp[-4].parameter_val, yyvsp[-1].raisesspec_val, yyvsp[0].contextspec_val);
      yyval.operation_val = yyvsp[-6].operation_val;
    ;
    break;}
case 254:
#line 1325 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation declaration");
      yyvsp[-1].operation_val->closeParens();
      yyvsp[-1].operation_val->finishConstruction(0, 0, 0);
      yyval.operation_val = yyvsp[-1].operation_val;
    ;
    break;}
case 255:
#line 1335 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.operation_val = new Operation(currentFile, yylineno, mainFile, yyvsp[-2].boolean_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 256:
#line 1341 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 0; ;
    break;}
case 257:
#line 1342 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = yyvsp[0].boolean_val; ;
    break;}
case 258:
#line 1346 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.boolean_val = 1; ;
    break;}
case 259:
#line 1350 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 260:
#line 1351 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = BaseType::voidType; ;
    break;}
case 261:
#line 1355 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 262:
#line 1356 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = 0; ;
    break;}
case 263:
#line 1357 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno,
		     "Syntax error in operation parameters");
      yyval.parameter_val = 0;
    ;
    break;}
case 264:
#line 1365 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.parameter_val = yyvsp[-1].parameter_val; ;
    break;}
case 265:
#line 1366 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      if (yyvsp[-4].parameter_val) { yyvsp[-4].parameter_val->append(yyvsp[-1].parameter_val); yyval.parameter_val = yyvsp[-4].parameter_val; }
      else yyval.parameter_val = yyvsp[-1].parameter_val;
    ;
    break;}
case 266:
#line 1373 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.parameter_val = new Parameter(currentFile, yylineno, mainFile, yyvsp[-2].int_val, yyvsp[-1].type_val, yyvsp[0].id_val);
    ;
    break;}
case 267:
#line 1379 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 0; ;
    break;}
case 268:
#line 1380 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 1; ;
    break;}
case 269:
#line 1381 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.int_val = 2; ;
    break;}
case 270:
#line 1385 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = 0; ;
    break;}
case 271:
#line 1386 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 272:
#line 1390 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.raisesspec_val = yyvsp[-1].raisesspec_val; ;
    break;}
case 273:
#line 1394 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.raisesspec_val = new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno);
    ;
    break;}
case 274:
#line 1397 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].raisesspec_val->append(new RaisesSpec(yyvsp[-1].scopedname_val, currentFile, yylineno));
      yyval.raisesspec_val = yyvsp[-4].raisesspec_val;
    ;
    break;}
case 275:
#line 1404 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = 0; ;
    break;}
case 276:
#line 1405 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 277:
#line 1409 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.contextspec_val = yyvsp[-1].contextspec_val; ;
    break;}
case 278:
#line 1413 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.contextspec_val = new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 279:
#line 1416 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyvsp[-4].contextspec_val->append(new ContextSpec(yyvsp[-1].string_val, currentFile, yylineno));
      yyval.contextspec_val = yyvsp[-4].contextspec_val;
    ;
    break;}
case 280:
#line 1423 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 281:
#line 1424 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 282:
#line 1425 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = yyvsp[0].type_val; ;
    break;}
case 283:
#line 1426 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = IdlType::scopedNameToType(currentFile, yylineno, yyvsp[0].scopedname_val);
    ;
    break;}
case 284:
#line 1432 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlLongVal scalev = yyvsp[-1].expr_val->evalAsLongV();

      if (scalev.negative) {
	IdlError(currentFile, yylineno,
		 "Fixed point scale must be >= 0");
      }
      IDL_ULong scale = scalev.u;

      if (yyvsp[-3].ulong_val > 31) {
	IdlError(currentFile, yylineno,
		 "Fixed point values may not have more than 31 digits");
      }
      if (scale > yyvsp[-3].ulong_val) {
	IdlError(currentFile, yylineno,
		 "Fixed point scale factor is greater than "
		 "the number of digits");
      }
      yyval.type_val = new FixedType(yyvsp[-3].ulong_val, scale);
    ;
    break;}
case 285:
#line 1455 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.type_val = new FixedType(0, 0);
    ;
    break;}
case 286:
#line 1461 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.type_val = new DeclaredType(IdlType::tk_value, 0, 0); ;
    break;}
case 287:
#line 1465 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new StructForward(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 288:
#line 1468 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.decl_val = new UnionForward(currentFile, yylineno, mainFile, yyvsp[0].id_val);
    ;
    break;}
case 297:
#line 1491 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      Prefix::setPrefix(idl_strdup(yyvsp[-1].string_val));
    ;
    break;}
case 298:
#line 1494 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma prefix");
    ;
    break;}
case 299:
#line 1500 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-2].scopedname_val);
      if (d) DeclRepoId::setRepoId(d, yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 300:
#line 1504 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma id");
    ;
    break;}
case 301:
#line 1510 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      Decl* d = Decl::scopedNameToDecl(currentFile, yylineno, yyvsp[-4].scopedname_val);
      if (d) DeclRepoId::setVersion(d, yyvsp[-3].int_literal_val, yyvsp[-1].int_literal_val, currentFile, yylineno);
    ;
    break;}
case 302:
#line 1514 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      IdlSyntaxError(currentFile, yylineno, "Malformed #pragma version");
    ;
    break;}
case 303:
#line 1520 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val, currentFile, yylineno-1);
    ;
    break;}
case 304:
#line 1526 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      Pragma::add(yyvsp[-1].string_val, currentFile, yylineno);
    ;
    break;}
case 305:
#line 1532 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{ yyval.string_val = yyvsp[0].string_val; ;
    break;}
case 306:
#line 1533 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"
{
      yyval.string_val = new char [strlen(yyvsp[-1].string_val) + strlen(yyvsp[0].string_val) + 1];
      strcpy(yyval.string_val, yyvsp[-1].string_val);
      strcat(yyval.string_val, yyvsp[0].string_val);
      delete [] yyvsp[-1].string_val;
      delete [] yyvsp[0].string_val;
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1542 "/home/dpg1/omni/cvs/40/src/tool/omniidl/cxx/idl.yy"

